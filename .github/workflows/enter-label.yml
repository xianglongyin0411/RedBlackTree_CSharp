name: enter_label

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Git Tag (e.g., v1.0.0)"
        required: false
      branch:
        description: "Branch (默认: develop)"
        required: false
        default: "develop"
      commit_hash:
        description: "Commit Hash (前7位即可)"
        required: false

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      # 1. 智能检出（tag > commit > branch）
      - name: Checkout Code
        uses: actions/checkout@v3
        id: checkout
        with:
          ref: ${{ 
            inputs.tag != '' && 'tags/' + inputs.tag || 
            inputs.commit_hash != '' && inputs.commit_hash || 
            inputs.branch 
          }}

      # 2. 输入校验（冲突检查 + 存在性检查）
      - name: Validate Inputs
        run: |
          if [ -n "${{ inputs.tag }}" ] && [ -n "${{ inputs.commit_hash }}" ]; then
            echo "::error::Tag和Commit不能同时填写！"
            exit 1
          fi
          
          if [ -z "$(git ls-remote --heads origin ${{ steps.checkout.outputs.ref }} 2>/dev/null)" ] &&
             [ -z "$(git ls-remote --tags origin ${{ steps.checkout.outputs.ref }} 2>/dev/null)" ]; then
            echo "::error::检出的Ref（${{ steps.checkout.outputs.ref }}）不存在！"
            exit 1
          fi
        shell: cmd

      # 3. 显示检出信息
      - name: Checkout Summary
        run: |
          echo " 检出类型: $(git rev-parse --verify --quiet ${{ steps.checkout.outputs.ref }}^0 && echo "Tag" || echo "Commit/Branch") "
          echo " 实际Ref: ${{ steps.checkout.outputs.ref }} "
        shell: cmd

      # 4. 恢复依赖项
      - name: Restore dependencies
        run: dotnet restore EcorealC4C.sln
        shell: cmd

      # 5. 编译代码
      - name: Build solution
        run: dotnet build EcorealC4C.sln --configuration Release --no-restore
        shell: cmd

      # 6. 运行单元测试
      - name: Run Unit Tests
        run: dotnet test EcorealC4C.sln --configuration Release --no-build --logger "trx;LogFileName=test_results.trx"
        shell: cmd
        continue-on-error: true

      # 7. 展示测试结果
      - name: Test Report
        uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
        if: success() || failure()
        with:
          name: Unit Test Report
          path: test-results.trx
          reporter: dotnet-trx

      # 8. 根据输入参数运行对应的脚本
      - name: Run Deployment Script
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            call Do-Confuser_Setup_Staging.bat staging
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            call Do-Confuser_Setup_Production.bat
          else
            echo "Invalid environment selected!"
            exit 1
        run: call Do-Confuser_Setup_Production.bat
        shell: cmd

      # 7. 上传生成的安装包
      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: artifacts/out/*.exe